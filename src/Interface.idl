#ifndef __DISCO_PLAT_IDL__
#define __DISCO_PLAT_IDL__
                                                                                
module disco_plat
{


struct nodeID {
    
    string identifier;    
    
};


enum token { ping, workRequest, workAssignment, result, blackToken, whiteToken };


struct blob {
    
    nodeID sourceNode;
    unsigned long computationID;

    token messageToken;

    sequence<char> data;
    unsigned short dataLenght;

};

                                                                                
interface LeftNeighbour {

    // Connects a new node to the cicle.
    // New node is added to existing one as its left neighbour.
    // This new node has to fix reference returned by this method and close the circle
    nodeID ConnectAsLeftNode(in nodeID newNodeID);
    
    // Informs the sircle that a node died. Message shall be resend in the original direction till it finds the other end.
    // Shall be folowed by closing cirlcle form the end.
    void NeigbourDied(in nodeID reportingNodeID);
    
    void UpdateRightNode(in nodeID newNodeID);
    void UpdateLeftNode(in nodeID newNodeID);
    
    // General boomerang token sending a regular service data. This token shall run clockwise only.
    void Boomerang(in blob data);

};


interface RightNeighbour {

    nodeID ConnectAsLeftNode(in nodeID newNodeID);
    void NeigbourDied(in nodeID reportingNodeID);
    void UpdateRightNode(in nodeID newNodeID);
    void UpdateLeftNode(in nodeID newNodeID);
    void Boomerang(in blob data);

};

};

#endif

