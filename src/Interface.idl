#ifndef __DISCO_PLAT_IDL__
#define __DISCO_PLAT_IDL__
                                                                                
module disco_plat
{


struct nodeID {
    
    string identifier;
    string algorithm;
    
};


enum type { PING, WORK_REQUEST, WORK_ASSIGNMET, RESULT, TERMINATION_TOKEN, TERMINATE, FREE_ID_SEARCH, INSTANCE_ANNOUNCEMENT };


struct blob {
    
    nodeID sourceNode;
    unsigned long computationID;

    type messageType;

    sequence<char> charDataSequence;
    sequence<long> longDataSequence;
    string dataStringA;
    string dataStringB;
    unsigned long slotA;
    unsigned long slotB;

};

exception ConnectionError {
    string message;
};
                                                                                
interface LeftNeighbour {

    // Connects a new node to the cicle.
    // New node is added to existing one as its left neighbour.
    // This new node has to fix reference returned by this method and close the circle
    void ConnectAsLeftNode(in nodeID newNodeID, out nodeID oldLeftNodeID) raises(ConnectionError);

    // General boomerang token sending a regular service data. This token shall run clockwise only.
    void Boomerang(in blob data);

};


interface RightNeighbour {

    // Requests for initial data which describes the specific instance of problem (e.g. weights, costs of all items and
    // capacity in knapsack problem).
    void BuildNetAndRequestData(in nodeID newNeighbourID);

    // Informs the circle that a node died. Message shall be resend in the original direction till it finds the other end.
    void NodeDied(in nodeID reportingNodeID, in nodeID deadNodeID);

    // Creates a new connection between nodes whose neighbours have died
    void RebuildNetwork(in nodeID newNeighbourID);

};

};

#endif

